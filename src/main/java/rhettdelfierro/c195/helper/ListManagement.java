package rhettdelfierro.c195.helper;

import javafx.collections.ObservableList;
import javafx.scene.control.Alert;
import rhettdelfierro.c195.models.Appointment;
import rhettdelfierro.c195.models.Customer;

import java.util.Comparator;

public class ListManagement {
    /**
     * Helper method to search for parts by name or id.
     *
     * @param searchText the text to search for
     * @return the list of parts
     */
    public static ObservableList<Appointment> searchAppointments(String searchText) {
        ObservableList<Appointment> parts = Inventory.lookupAppointment(searchText);
        // defining out the error here by using regex to check for int:
        if (checkValidInt(searchText)) {
            int partId = Integer.parseInt(searchText);
            Appointment part = Inventory.lookupAppointment(partId);
            // will only show if there's a matching part name or a matching part id. Not both.
            if (part != null && parts.size() == 0) {
                parts.add(part);
            }
        }
        return parts;
    }

    /**
     * Helper method to search for products by name or id.
     *
     * @param searchText the text to search for
     * @return the list of products
     * RUNTIME ERROR: parseInt() would throw an IOException here, but we guard against that by using the checkValidInt
     *                helper functions.
     */
    public static ObservableList<Customer> searchCustomers(String searchText) {
        ObservableList<Customer> products = Inventory.lookupCustomer(searchText);
        // defining out the error here by using regex to check for int:
        if (checkValidInt(searchText)) {
            int productId = Integer.parseInt(searchText);
            Customer product = Inventory.lookupCustomer(productId);
            // will only show if there's a matching product name or a matching product id. Not both.
            if (product != null && products.size() == 0) {
                products.add(product);
            }
        }
        return products;
    }

    /**
     * Helper to parse strings for valid integers. Often used before Integer.parseInt() and other casting.
     * @param str the string to check.
     * @return boolean whether the string is a valid integer.
     */
    public static boolean checkValidInt(String str){
        return str.matches("^-?\\d+$");
    }

    /**
     * Helper to show error dialogs.
     * @param message the error message to display.
     */
    public static void showErrorDialog(String message){
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Program error.");
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Helper to show warning dialogs. This is really not used in the app as most warnings are errors.
     * @param message the warning message to display.
     */
    public static void showWarningDialog(String message){
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Continue?");
        alert.setContentText(message);
        alert.showAndWait();
    }

    /**
     * Helper to parse strings for valid doubles. Often used before to check if prices were correctly entered.
     * @param str string to parse
     * @return boolean whether the string is a valid double.
     */
    public static boolean checkValidDouble(String str){
        return str.matches("^[-+]?\\d*\\.?\\d+$");
    }

    /**
     * Helper to find the given part by id and return its index from the store.
     * @param id the id of the part to find.
     * @return index of the part in the store.
     */
    public static int findIndexForAppointment(int id) {
        ObservableList<Appointment> allAppointments = Inventory.getAllAppointments();

        for (int i = 0; i < allAppointments.size(); i++) {
            if (allAppointments.get(i).getId() == id) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Helper to find the given product by id and return its index from the store.
     * @param id the id of the product to find.
     * @return index of the product in the store.
     * FUTURE ENHANCEMENT: Could have overloaded with parts.
     */
    public static int findIndexForCustomer(int id) {
        ObservableList<Customer> allCustomers = Inventory.getAllCustomers();

        for (int i = 0; i < allCustomers.size(); i++) {
            if (allCustomers.get(i).getId() == id) {
                return i;
            }
        }
        return -1;
    }

    /**
     * This will generate a new part id based on the next available integer for partId.
     * @return the new part id
     */
    public static int getAutoGeneratedAppointmentId() {
        int id = 1;
        ObservableList<Appointment> allAppointments = Inventory.getAllAppointments();
        ObservableList<Appointment> sortedAppointments = allAppointments.sorted(Comparator.comparingInt(Appointment::getId));
        for (Appointment part : sortedAppointments) {
            if (part.getId() == id) {
                id++;
            } else if (part.getId() > id) {
                break;
            }
        }
        return id;
    }

    /**
     * This will generate a new product id based on the next available integer for productId.
     * @return the new product id
     */
    public static int getAutoGeneratedCustomerId() {
        int id = 1;
        ObservableList<Customer> allCustomers = Inventory.getAllCustomers();
        ObservableList<Customer> sortedCustomers = allCustomers.sorted(Comparator.comparingInt(Customer::getId));
        for (Customer product : sortedCustomers) {
            if (product.getId() == id) {
                id++;
            } else if (product.getId() > id) {
                break;
            }
        }
        return id;
    }
}
